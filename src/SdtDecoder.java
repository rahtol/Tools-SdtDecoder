import java.io.PrintStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;


public class SdtDecoder {


	final static String version = "SdtDecoder v1.03, 22.12.2014";

	
	public static void main(String[] args) {

		System.out.println(version);
		
		if (args.length < 2) {
			System.err.println ("usage: SdtDecoder <Existing-SDT-Binary-InputFile> <Name-of-Generated-SDT-ASM-Outputfile>\n");
			System.exit(-1);
		};

		System.out.println("Reading from: \"" + args[0] + "\"");
		System.out.println("Writing to: \"" + args [1] + "\"");

		SdtDecoder sdtDecoder = new SdtDecoder ();
		sdtDecoder.parseSdtBinaryFile (args[0], args [1]);

		System.out.println("SdtDecoder ok.");
	}
	
	public int readUInt8 (FileInputStream inf) throws IOException
	{
		return inf.read();
	}
	
	public int readUInt16 (FileInputStream inf) throws IOException
	{
		int b1 = inf.read();
		int b2 = inf.read();
		return (b2 * 256) + b1;
	}
	
	public int readUInt32 (FileInputStream inf) throws IOException
	{
		int b1 = inf.read();
		int b2 = inf.read();
		int b3 = inf.read();
		int b4 = inf.read();
		return (((b4 * 256) + b3) * 256 + b2) * 256 + b1;
	}

	public String decodeElTyp (int elType) throws SdtBinaryFormatException
	{
		switch (elType) {
		case 201:
			return "Signal";
		case 200:
			return "Point";
		case 203:
			return "Crossing";
		case 207:
			return "Track Section";
		case 213:
			return "Track Vacancy Section";
		case 131:
			return "Boolean";
		case 0:
			return "End of list";
		default:
			throw new SdtBinaryFormatException ("unknown element type: " + elType);
//			return "??? " + Integer.toString(elType) + " ???";
		}
	}
	public void printHeader (PrintStream outf, String name)
	{
/*
;******************************************************************************
; $Header: $
; $Revision: $
;
; UNKNOWN
; UNKNOWN
;
; Changedate: 2014-10-30 09:39
;
; Copyright(C) 2005-2008 Siemens AG - All Rights Reserved - Confidential
;******************************************************************************

    NAME ConfData_SDT_bin


    DATA SEGMENT BYTE USE32 RO
    ALIGN 1

*/
		
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		Date date = new Date();
		
		outf.println(";******************************************************************************");
		outf.println("; $Header: $");
		outf.println("; $Revision: $");
		outf.println(";");
		outf.println("; UNKNOWN");
		outf.println(";");
		outf.println("; Generated by: " + version);
		outf.println("; Generated at: " + dateFormat.format(date));
		outf.println(";");
		outf.println("; Copyright(C) 2005-2015 Siemens AG - All Rights Reserved - Confidential");
		outf.println(";******************************************************************************");
		outf.println("");
		outf.println("    NAME "+ name);
		outf.println("");
		outf.println("");
		outf.println("    DATA SEGMENT BYTE USE32 RO");
		outf.println("    ALIGN 1");
		outf.println("");
	}
	
	public void printWcuHeader (PrintStream outf, int wcuId, int len, int tdbversion)
	{
/*
	    ;*** WCU-ID
	    DW      4097

	    ;*** Length of data
	    DD      (label_end_4097-label_start_4097)

	label_start_4097:

	    ;*** TDB version
	    DW      48936
*/		

		outf.println("    ;*** WCU-ID");
		outf.println("    DW      " + wcuId);
		outf.println("");
		outf.println("    ;*** Length of data");
		outf.println("    DD      (label_end_" + wcuId + "-label_start_" + wcuId + ")");
		outf.println("");
		outf.println("label_start_" + wcuId + ":");
		outf.println("");
		outf.println("    ;*** TDB version");
		outf.println("    DW      " + tdbversion);
	}

	public void printElement (PrintStream outf, int elType, int elIndex, int bitpos) throws SdtBinaryFormatException
	{
/*
    ; Boolean 60407 ab Bit-Position 1020
    DB      131
    DW      60407
    DW      1020
*/
/*
    ;*** End of list
    DB      0
    DW      0
    DW      0
*/

		if (elType == 0) {
			outf.println("    ;*** " + decodeElTyp (elType));
		}
		else {
			outf.println("    ; " + decodeElTyp (elType) + " " + elIndex + " ab Bit-Position " + bitpos);
		}
		outf.println("    DB      " + elType);
		outf.println("    DW      " + elIndex);
		outf.println("    DW      " + bitpos);
	}

	public void printWcuFooter (PrintStream outf, int wcuId)
	{
		/*

label_end_4097:

		*/
		
		outf.println("");
		outf.println("label_end_" + wcuId + ":");
		outf.println("");
	}
	
	public void printFooter (PrintStream outf)
	{
/*
    ;*** Illegal WCU-ID
    DW      0
    ;*** Length of data = 0 => End-Of-File
    DD      0

    DATA ENDS
    END
*/
		
		outf.println("    ;*** Illegal WCU-ID");
		outf.println("    DW      0");
		outf.println("    ;*** Length of data = 0 => End-Of-File");
		outf.println("    DD      0");
		outf.println("");
		outf.println("    DATA ENDS");
		outf.println("    END");
	}
	
	public void parseSdtBinaryFile (String infname, String outfname)
	{
		File infile = new File (infname);
		File outfile = new File (outfname);
		
		try {
			FileInputStream inf= new FileInputStream (infile);
			PrintStream outf = new PrintStream (outfile);
			String name = infile.getName();
			name = name.replace('.', '_');
			
			int wcuId;
			int len;
			int tdbversion;
			
			printHeader (outf, name);
			while ((wcuId = this.readUInt16(inf)) != 0)
			{
				len = this.readUInt32(inf);
				if ((len % 5) != 2) {
					throw new SdtBinaryFormatException ("len mod 5 should be 2 for every wcu: " + len);
				}
				tdbversion = this.readUInt16(inf);
				printWcuHeader (outf, wcuId, len, tdbversion);
				len -= 2; // consume the tdbversion which is included in len
				while (len > 0)
				{
					int elType = this.readUInt8(inf);
					int elIndex = this.readUInt16(inf);
					int bitpos = this.readUInt16(inf);
					printElement (outf, elType, elIndex, bitpos);
					len -= 5; // number of bytes consumed per element read
				}
				printWcuFooter (outf, wcuId);
			}
			len = this.readUInt32(inf);
			if (len != 0) {
				throw new SdtBinaryFormatException ("DD len at EOF should be zero: " + len);
			}
			
			int i = 0;
			int eof;
			while (((eof = inf.read()) != -1) || (i == 4)) {
				if (i == 0)
					System.out.print ("Extra Bytes at EOF: " + eof);
				else
					System.out.print (", " + eof);
				i++;
			};
			if (i > 0) {
				System.out.println();
			}
			if (eof != -1) {
				throw new SdtBinaryFormatException ("Too many extra Bytes at EOF.");
			}
			
			printFooter (outf);
			outf.close();
			inf.close();
			
		} catch (FileNotFoundException e) {
			System.err.println(e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			System.err.println(e.getMessage());
			e.printStackTrace();
		} catch (SdtBinaryFormatException e) {
			System.err.println(e.getMessage());
			e.printStackTrace();
		}
		
	}

}
